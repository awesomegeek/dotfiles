set nocompatible
set term=screen-256color
" filetype off
filetype plugin on

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" ------Plugins-------
" Plug'mhinz/vim-startify'
Plug'scrooloose/nerdtree'
Plug 'tpope/vim-surround'
Plug 'gcmt/breeze.vim'
Plug 'kien/ctrlp.vim'
Plug 'SirVer/ultisnips'
" Linting
" Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe'
Plug 'davidhalter/jedi-vim'
" Python
Plug 'nvie/vim-flake8'
Plug 'jmcantrell/vim-virtualenv'

" For HTML {{
Plug 'valloric/matchtagalways'
Plug 'mattn/emmet-vim'
" }}

" Visual and useability
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'bling/vim-bufferline'
Plug 'airblade/vim-gitgutter'
Plug 'Yggdroot/indentLine'
Plug 'tomtom/tcomment_vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'

" Themes
Plug 'KeitaNakamura/neodark.vim'

Plug 'scrooloose/nerdcommenter'
Plug 'dhruvasagar/vim-table-mode'
Plug 'bronson/vim-trailing-whitespace'
call plug#end()

" Clipboard (For Mac)
set clipboard=unnamed

" set termguicolors
colorscheme neodark

" let g:ale_linters = {
" \   'javascript': ['eslint'],
" \   'pythoon' : ['flake8'],
" \}

" IndentLine {{
let g:indentLine_char = '┆'
let g:indentLine_first_char = '.'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 1

" Vim
let g:indentLine_color_term = 239

" GVim
let g:indentLine_color_gui = '#A4E57E'
" }}

filetype plugin indent on

""""""""
if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Use :help 'option' to see the documentation for the given option.
" set autoindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set showmode
set smarttab

set nrformats-=octal
set shiftround

set ttimeout
set ttimeoutlen=50

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

set autoread

set encoding=utf-8
set tabstop=4 shiftwidth=4 expandtab
set listchars=tab:▒░,trail:▓
set list

inoremap <C-U> <C-G>u<C-U>

set number
set hlsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" do not history when leavy buffer
set hidden

set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

set completeopt=menuone,longest,preview

"
" Plugins config
"

" NERDTree
nnoremap <S-n> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" CtrlP
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/node_modules/*
let g:ctrlp_custom_ignore={
  \ 'file': '\v\.(pyc|exe|so|dll|class|png|jpg|jpeg)$',
 \}

" Ultisnip
" NOTE: <f1> otherwise it overrides <tab> forever
" let g:UltiSnipsExpandTrigger="<f1>"
" let g:UltiSnipsJumpForwardTrigger="<f1>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" let g:did_UltiSnips_vim_after = 1

" vim-airline
let g:airline_powerline_fonts = 1

" indent / deindent after selecting the text with (⇧ v), (.) to repeat.
let g:tcomment#replacements_xml={}
let g:airline_theme='neodark'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#exclude_preview = 1


" Ctrl Space config
set showtabline=0
set nocompatible
set hidden
if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

" lazy ':'
map \ :

let mapleader = "\<Space>"
nnoremap <Leader>p :set paste<CR>
nnoremap <Leader>o :set nopaste<CR>
noremap  <Leader>g :GitGutterToggle<CR>

" Buffer management
nmap <Leader>bb :CtrlPBuffer<CR>
nmap <Leader>bm :CtrlPMixed<CR>
nmap <Leader>bs :CtrlPMRU<CR>

nnoremap <silent> <C-b> :BuffergatorMruCyclePrev<CR>
inoremap <silent> <C-b> <Esc>::BuffergatorMruCyclePrev<CR>
nnoremap <silent> <C-n> :BuffergatorMruCycleNext<CR>
inoremap <silent> <C-n> <Esc>:BuffergatorMruCycleNext<CR>

nnoremap <silent> <C-w> :bd<CR>
inoremap <silent> <C-w> <Esc>:bd<CR>


" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1
" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>
" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>

" -- EMMET CONFIG --
" Redefine trigger key
let g:user_emmet_leader_key=','
" -- --

nmap <leader>w :FixWhitespace<cr>
" this machine config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc
endif

autocmd! bufwritepost .vimrc source %
autocmd BufWritePost *.py call Flake8()
" Removes trailing spaces
"function TrimWhiteSpace()
   "%s/\s*$//
   "''
"endfunction

autocmd BufWritePre *.py :FixWhitespace
inoremap jk <Esc>

" Load .ycm_extra_conf.py
let g:ycm_confirm_extra_conf = 0

" set nowrap
